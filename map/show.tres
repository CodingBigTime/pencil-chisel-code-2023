[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://ce7ciwkcmief1"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_hlush"]
invert = true

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_qsvjk"]
expanded_output_ports = [0]
texture = SubResource("NoiseTexture2D_hlush")
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_byx3y"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 1, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_u05ul"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_e8rhh"]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D tex_vtx_2 : source_color;



void vertex() {
// Texture2D:2
	vec4 n_out2p0 = texture(tex_vtx_2, UV);


// VectorOp:3
	vec4 n_in3p1 = vec4(0.00000, 1.00000, 0.00000, 0.00000);
	vec4 n_out3p0 = n_out2p0 * n_in3p1;


// Input:5
	vec3 n_out5p0 = VERTEX;


// VectorOp:4
	vec4 n_out4p0 = n_out3p0 + vec4(n_out5p0, 0.0);


// Output:0
	VERTEX = vec3(n_out4p0.xyz);


}
"
nodes/vertex/0/position = Vector2(620, 100)
nodes/vertex/2/node = SubResource("VisualShaderNodeTexture_qsvjk")
nodes/vertex/2/position = Vector2(20, 60)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorOp_byx3y")
nodes/vertex/3/position = Vector2(280, 80)
nodes/vertex/4/node = SubResource("VisualShaderNodeVectorOp_u05ul")
nodes/vertex/4/position = Vector2(440, 200)
nodes/vertex/5/node = SubResource("VisualShaderNodeInput_e8rhh")
nodes/vertex/5/position = Vector2(140, 380)
nodes/vertex/connections = PackedInt32Array(5, 0, 4, 1, 3, 0, 4, 0, 2, 0, 3, 0, 4, 0, 0, 0)
nodes/fragment/0/position = Vector2(460, 100)
